// Generated by CoffeeScript 1.3.2
var peep,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

peep = {};

peep.JSONP = function(location) {
  var script;
  script = document.createElement('script');
  script.src = location;
  return document.querySelector('head').appendChild(script);
};

peep.openPopup = function(url) {
  return window.open(url, 'sharer', 'toolbar=0,status=0,resizable=1,width=626,height=436');
};

peep.Peep = (function() {

  function Peep(selector, options) {
    var index, node, stylesheet, _i, _len, _ref;
    this.selector = selector;
    this.options = options;
    this.selector = this.selector || '.peep';
    this.options = this.options || {};
    this.options.theme = this.options.theme || 'default';
    peep.instances = [];
    _ref = document.querySelectorAll(this.selector);
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      node = _ref[index];
      node.setAttribute('data-id', index);
      new peep.Instance(node);
    }
    if (this.options.theme !== 'none') {
      stylesheet = document.createElement('link');
      stylesheet.rel = 'stylesheet';
      stylesheet.href = this.options.theme.substr(0, 7) === 'http://' || this.options.theme.substr(0, 8) === 'https://' ? this.options.theme : 'themes/' + this.options.theme + '.css';
      document.querySelector('head').appendChild(stylesheet);
    }
  }

  return Peep;

})();

peep.Instance = (function() {

  function Instance(node) {
    var dataset,
      _this = this;
    this.node = node;
    dataset = this.node.dataset;
    this.id = dataset.id;
    this.url = dataset.url || window.location.href;
    this.title = dataset.title || document.title;
    this.services = dataset.services || 'Twitter, Facebook';
    peep.instances[this.id] = {};
    peep.instances[this.id].services = [];
    this.services.replace(/^\s*|\s*$/g, '').split(/\s*,\s*/).forEach(function(service) {
      if (peep[service]) {
        return peep.instances[_this.id].services[service] = new peep[service](_this.node, _this.id, _this.url, _this.title);
      } else {
        return console.error('"' + service + '" service doesn\'t exist.');
      }
    });
  }

  return Instance;

})();

peep.Service = (function() {

  function Service() {}

  Service.prototype.render = function() {
    peep.JSONP(this.endpoints.count);
    return this.node.innerHTML += '<div class="peep_share ' + this["class"] + '"><a href="' + this.endpoints.share + '" class="label" onclick="peep.openPopup(this.href);return false;">' + this.label + '</a><span class="count loading">...</span></div>';
  };

  return Service;

})();

peep.Facebook = (function(_super) {

  __extends(Facebook, _super);

  function Facebook(node, id, url, title) {
    this.node = node;
    this.id = id;
    this.url = url;
    this.title = title;
    this.label = 'Facebook';
    this["class"] = 'facebook';
    this.endpoints = {
      share: 'http://www.facebook.com/sharer.php?t=' + this.title + '&u=' + this.url,
      count: 'http://graph.facebook.com/' + this.url + '?callback=peep.instances[' + this.id + '].services.Facebook.callback'
    };
    this.render();
  }

  Facebook.prototype.callback = function(res) {
    var count;
    res.shares = res.shares || 0;
    count = this.node.querySelector('.' + this["class"] + ' .count');
    count.removeAttribute('loading');
    return count.innerHTML = res.shares;
  };

  return Facebook;

})(peep.Service);

peep.LinkedIn = (function(_super) {

  __extends(LinkedIn, _super);

  function LinkedIn(node, id, url, title) {
    this.node = node;
    this.id = id;
    this.url = url;
    this.title = title;
    this.label = 'LinkedIn';
    this["class"] = 'linkedin';
    this.endpoints = {
      share: ' http://linkedin.com/shareArticle?url=' + this.url + '&title=' + this.title,
      count: 'http://linkedin.com/countserv/count/share?url=' + this.url + '&callback=peep.instances[' + this.id + '].services.LinkedIn.callback'
    };
    this.render();
  }

  LinkedIn.prototype.callback = function(res) {
    var count;
    count = this.node.querySelector('.' + this["class"] + ' .count');
    count.removeAttribute('loading');
    return count.innerHTML = res.count;
  };

  return LinkedIn;

})(peep.Service);

peep.Twitter = (function(_super) {

  __extends(Twitter, _super);

  function Twitter(node, id, url, title) {
    this.node = node;
    this.id = id;
    this.url = url;
    this.title = title;
    this.label = 'Twitter';
    this["class"] = 'twitter';
    this.endpoints = {
      share: 'https://twitter.com/intent/tweet?text=' + this.title + '&url=' + this.url,
      count: 'http://urls.api.twitter.com/1/urls/count.json?url=' + this.url + '&callback=peep.instances[' + this.id + '].services.Twitter.callback'
    };
    this.render();
  }

  Twitter.prototype.callback = function(res) {
    var count;
    count = this.node.querySelector('.' + this["class"] + ' .count');
    count.removeAttribute('loading');
    return count.innerHTML = res.count;
  };

  return Twitter;

})(peep.Service);
